#pragma once

////////////////////////////////////////////////////////////////////////////////////////
namespace react {

////////////////////////////////////////////////////////////////////////////////////////
/// ReactiveObject
////////////////////////////////////////////////////////////////////////////////////////
template <typename D>
class ReactiveObject
{
public:
	////////////////////////////////////////////////////////////////////////////////////////
	/// Aliases
	////////////////////////////////////////////////////////////////////////////////////////
	template <typename S>
	using Signal = RSignal<D,S>;

	template <typename S>
	using VarSignal = RVarSignal<D,S>;

	template <typename E>
	using Events = REvents<D,E>;

	template <typename E>
	using EventSource = REventSource<D,E>;

	using Observer = Observer_<D>;

	////////////////////////////////////////////////////////////////////////////////////////
	/// MakeVar (higher order signal)
	////////////////////////////////////////////////////////////////////////////////////////
	template
	<
		template <typename Domain_, typename Val_> class TOuter,
		typename TInner
	>
	static inline auto MakeVar(const TOuter<D,TInner>& value)
		-> VarSignal<Signal<TInner>>
	{
		return react::MakeVar<D>(value);
	}

	////////////////////////////////////////////////////////////////////////////////////////
	/// MakeVar
	////////////////////////////////////////////////////////////////////////////////////////
	template <typename S>
	static inline auto MakeVar(const S& value)
		-> VarSignal<S>
	{
		return react::MakeVar<D>(value);
	}

	////////////////////////////////////////////////////////////////////////////////////////
	/// MakeSignal
	////////////////////////////////////////////////////////////////////////////////////////
	template
	<
		typename TFunc,
		typename ... TArgs
	>
	static inline auto MakeSignal(TFunc func, const Signal<TArgs>& ... args)
		-> Signal<decltype(func(args() ...))>
	{
		typedef decltype(func(args() ...)) S;

		return react::MakeSignal<D>(func, args ...);
	}

	////////////////////////////////////////////////////////////////////////////////////////
	/// MakeEventSource
	////////////////////////////////////////////////////////////////////////////////////////
	template <typename E>
	static inline auto MakeEventSource()
		-> EventSource<E>
	{
		return react::MakeEventSource<D,E>();
	}

	////////////////////////////////////////////////////////////////////////////////////////
	/// DYNAMIC_REF
	////////////////////////////////////////////////////////////////////////////////////////
	#define DYNAMIC_REF(obj, name)	\
	Flatten(						\
		MakeSignal([] (				\
			Identity<decltype(obj)>::Type::ValueT r) { return r->name; }, obj))
};

} //~namespace react